Testing function updateCoins:
Test Passed. The correct number of coins is 18.
Test Passed. The correct number of coins is 0.
Test Passed. The correct number of coins is 4.
TESTS PASSED

Testing function whoseTurn:
Test passed. It is player 0's turn. 
Test passed. It is player 1's turn. 
Test passed. It is player 2's turn. 
Test passed. It is player 3's turn. 
Test passed. It is player 4's turn. 
Test passed.
Test passed.
Test passed.
Test passed.
TESTS PASSED

Testing function getCost:
All cards matched to their proper cost.
TESTS PASSED

Testing function isGameOver:
Province supply count is: 8
Test 1 passed. The game is not over.
Test 2 passed. There is still enough supply count.
Test 3 passed. The game is over.
Test 4 passed. The game is over.
TESTS PASSED

Testing adventurer:
The player's hand has 5 cards.
Player's original hand: 0 gold, 0 silver, 0 copper makes 0 coins.
Player's hand after adventurer: 0 gold, 1 silver, 1 copper makes 2 coins.
The players hand is now 7 cards.
Test passed. Player drew 2 coin cards.
TESTS PASSED

Testing smithy:
Player's original hand has 10 cards.
Test passed! The player gained 3 cards and discarded Smithy.
TESTS PASSED

Testing village:
Player's original hand has 6 cards.
Test passed. The player gained one card and discarded Village.
Test passed. The player gained 2 actions.
TESTS PASSED

Testing great hall:
Player's original hand has 6 cards.
Test passed. The player gained one card and discarded Great Hall.
Test passed. The player gained 1 actions.
TESTS PASSED

File 'dominion.c'
Lines executed:37.17% of 565
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:19
        -:    0:Programs:19
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
   306591:    9:int compare(const void* a, const void* b) {
   306591:   10:	if (*(int*)a > *(int*)b)
     2921:   11:		return 1;
   303670:   12:	if (*(int*)a < *(int*)b)
    82136:   13:		return -1;
   221534:   14:	return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState* newGame() {
    #####:   18:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:	return g;
        -:   20:}
        -:   21:
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:	int k8, int k9, int k10) {
    #####:   24:	int* k = malloc(10 * sizeof(int));
    #####:   25:	k[0] = k1;
    #####:   26:	k[1] = k2;
    #####:   27:	k[2] = k3;
    #####:   28:	k[3] = k4;
    #####:   29:	k[4] = k5;
    #####:   30:	k[5] = k6;
    #####:   31:	k[6] = k7;
    #####:   32:	k[7] = k8;
    #####:   33:	k[8] = k9;
    #####:   34:	k[9] = k10;
    #####:   35:	return k;
        -:   36:}
        -:   37:
     6014:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:	struct gameState *state) {
        -:   40:
        -:   41:	int i;
        -:   42:	int j;
        -:   43:	int it;
        -:   44:	//set up random number generator
     6014:   45:	SelectStream(1);
     6014:   46:	PutSeed((long)randomSeed);
        -:   47:
        -:   48:	//check number of players
     6014:   49:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:	{
    #####:   51:		return -1;
        -:   52:	}
        -:   53:
        -:   54:	//set number of players
     6014:   55:	state->numPlayers = numPlayers;
        -:   56:
        -:   57:	//check selected kingdom cards are different
    66154:   58:	for (i = 0; i < 10; i++)
        -:   59:	{
   661540:   60:		for (j = 0; j < 10; j++)
        -:   61:		{
   601400:   62:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:			{
    #####:   64:				return -1;
        -:   65:			}
        -:   66:		}
        -:   67:	}
        -:   68:
        -:   69:
        -:   70:	//initialize supply
        -:   71:	///////////////////////////////
        -:   72:
        -:   73:	//set number of Curse cards
     6014:   74:	if (numPlayers == 2)
        -:   75:	{
     1406:   76:		state->supplyCount[curse] = 10;
        -:   77:	}
     4608:   78:	else if (numPlayers == 3)
        -:   79:	{
     1304:   80:		state->supplyCount[curse] = 20;
        -:   81:	}
        -:   82:	else
        -:   83:	{
     3304:   84:		state->supplyCount[curse] = 30;
        -:   85:	}
        -:   86:
        -:   87:	//set number of Victory cards
     6014:   88:	if (numPlayers == 2)
        -:   89:	{
     1406:   90:		state->supplyCount[estate] = 8;
     1406:   91:		state->supplyCount[duchy] = 8;
     1406:   92:		state->supplyCount[province] = 8;
        -:   93:	}
        -:   94:	else
        -:   95:	{
     4608:   96:		state->supplyCount[estate] = 12;
     4608:   97:		state->supplyCount[duchy] = 12;
     4608:   98:		state->supplyCount[province] = 12;
        -:   99:	}
        -:  100:
        -:  101:	//set number of Treasure cards
     6014:  102:	state->supplyCount[copper] = 60 - (7 * numPlayers);
     6014:  103:	state->supplyCount[silver] = 40;
     6014:  104:	state->supplyCount[gold] = 30;
        -:  105:
        -:  106:	//set number of Kingdom cards
   126294:  107:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:	{
   992310:  109:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:		{
   932170:  111:			if (kingdomCards[j] == i)
        -:  112:			{
        -:  113:				//check if card is a 'Victory' Kingdom card
    60140:  114:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:				{
    24044:  116:					if (numPlayers == 2) {
     2808:  117:						state->supplyCount[i] = 8;
        -:  118:					}
     9214:  119:					else { state->supplyCount[i] = 12; }
        -:  120:				}
        -:  121:				else
        -:  122:				{
    48118:  123:					state->supplyCount[i] = 10;
        -:  124:				}
    60140:  125:				break;
        -:  126:			}
        -:  127:			else    //card is not in the set choosen for the game
        -:  128:			{
   872030:  129:				state->supplyCount[i] = -1;
        -:  130:			}
        -:  131:		}
        -:  132:
        -:  133:	}
        -:  134:
        -:  135:	////////////////////////
        -:  136:	//supply intilization complete
        -:  137:
        -:  138:	//set player decks
    25954:  139:	for (i = 0; i < numPlayers; i++)
        -:  140:	{
    19940:  141:		state->deckCount[i] = 0;
    79760:  142:		for (j = 0; j < 3; j++)
        -:  143:		{
    59820:  144:			state->deck[i][j] = estate;
    59820:  145:			state->deckCount[i]++;
        -:  146:		}
   159520:  147:		for (j = 3; j < 10; j++)
        -:  148:		{
   139580:  149:			state->deck[i][j] = copper;
   139580:  150:			state->deckCount[i]++;
        -:  151:		}
        -:  152:	}
        -:  153:
        -:  154:	//shuffle player decks
    25954:  155:	for (i = 0; i < numPlayers; i++)
        -:  156:	{
    19940:  157:		if (shuffle(i, state) < 0)
        -:  158:		{
    #####:  159:			return -1;
        -:  160:		}
        -:  161:	}
        -:  162:
        -:  163:	//draw player hands
    25954:  164:	for (i = 0; i < numPlayers; i++)
        -:  165:	{
        -:  166:		//initialize hand size to zero
    19940:  167:		state->handCount[i] = 0;
    19940:  168:		state->discardCount[i] = 0;
        -:  169:		//draw 5 cards
        -:  170:		// for (j = 0; j < 5; j++)
        -:  171:		//	{
        -:  172:		//	  drawCard(i, state);
        -:  173:		//	}
        -:  174:	}
        -:  175:
        -:  176:	//set embargo tokens to 0 for all supply piles
   168392:  177:	for (i = 0; i <= treasure_map; i++)
        -:  178:	{
   162378:  179:		state->embargoTokens[i] = 0;
        -:  180:	}
        -:  181:
        -:  182:	//initialize first player's turn
     6014:  183:	state->outpostPlayed = 0;
     6014:  184:	state->phase = 0;
     6014:  185:	state->numActions = 1;
     6014:  186:	state->numBuys = 1;
     6014:  187:	state->playedCardCount = 0;
     6014:  188:	state->whoseTurn = 0;
     6014:  189:	state->handCount[state->whoseTurn] = 0;
        -:  190:	//int it; move to top
        -:  191:
        -:  192:	//Moved draw cards to here, only drawing at the start of a turn
    36084:  193:	for (it = 0; it < 5; it++) {
    30070:  194:		drawCard(state->whoseTurn, state);
        -:  195:	}
        -:  196:
     6014:  197:	updateCoins(state->whoseTurn, state, 0);
        -:  198:
     6014:  199:	return 0;
        -:  200:}
        -:  201:
    20888:  202:int shuffle(int player, struct gameState *state) {
        -:  203:
        -:  204:
        -:  205:	int newDeck[MAX_DECK];
    20888:  206:	int newDeckPos = 0;
        -:  207:	int card;
        -:  208:	int i;
        -:  209:
    20888:  210:	if (state->deckCount[player] < 1)
      474:  211:		return -1;
    20414:  212:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  213:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
   244149:  215:	while (state->deckCount[player] > 0) {
   203321:  216:		card = floor(Random() * state->deckCount[player]);
   203321:  217:		newDeck[newDeckPos] = state->deck[player][card];
   203321:  218:		newDeckPos++;
   634560:  219:		for (i = card; i < state->deckCount[player] - 1; i++) {
   431239:  220:			state->deck[player][i] = state->deck[player][i + 1];
        -:  221:		}
   203321:  222:		state->deckCount[player]--;
        -:  223:	}
   223735:  224:	for (i = 0; i < newDeckPos; i++) {
   203321:  225:		state->deck[player][i] = newDeck[i];
   203321:  226:		state->deckCount[player]++;
        -:  227:	}
        -:  228:
    20414:  229:	return 0;
        -:  230:}
        -:  231:
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  233:{
        -:  234:	int card;
    #####:  235:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:	//check if it is the right phase
    #####:  238:	if (state->phase != 0)
        -:  239:	{
    #####:  240:		return -1;
        -:  241:	}
        -:  242:
        -:  243:	//check if player has enough actions
    #####:  244:	if (state->numActions < 1)
        -:  245:	{
    #####:  246:		return -1;
        -:  247:	}
        -:  248:
        -:  249:	//get card played
    #####:  250:	card = handCard(handPos, state);
        -:  251:
        -:  252:	//check if selected card is an action
    #####:  253:	if (card < adventurer || card > treasure_map)
        -:  254:	{
    #####:  255:		return -1;
        -:  256:	}
        -:  257:
        -:  258:	//play card
    #####:  259:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  260:	{
    #####:  261:		return -1;
        -:  262:	}
        -:  263:
        -:  264:	//reduce number of actions
    #####:  265:	state->numActions--;
        -:  266:
        -:  267:	//update coins (Treasure cards may be added with card draws)
    #####:  268:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:
    #####:  270:	return 0;
        -:  271:}
        -:  272:
    #####:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:	int who;
        -:  275:	if (DEBUG) {
        -:  276:		printf("Entering buyCard...\n");
        -:  277:	}
        -:  278:
        -:  279:	// I don't know what to do about the phase thing.
        -:  280:
    #####:  281:	who = state->whoseTurn;
        -:  282:
    #####:  283:	if (state->numBuys < 1) {
        -:  284:		if (DEBUG)
        -:  285:			printf("You do not have any buys left\n");
    #####:  286:		return -1;
        -:  287:	}
    #####:  288:	else if (supplyCount(supplyPos, state) < 1) {
        -:  289:		if (DEBUG)
        -:  290:			printf("There are not any of that type of card left\n");
    #####:  291:		return -1;
        -:  292:	}
    #####:  293:	else if (state->coins < getCost(supplyPos)) {
        -:  294:		if (DEBUG)
        -:  295:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:		return -1;
        -:  297:	}
        -:  298:	else {
    #####:  299:		state->phase = 1;
        -:  300:		//state->supplyCount[supplyPos]--;
    #####:  301:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  302:
    #####:  303:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  304:		state->numBuys--;
        -:  305:		if (DEBUG)
        -:  306:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  307:	}
        -:  308:
        -:  309:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  310:	//state->discardCount[who]++;
        -:  311:
    #####:  312:	return 0;
        -:  313:}
        -:  314:
    #####:  315:int numHandCards(struct gameState *state) {
    #####:  316:	return state->handCount[whoseTurn(state)];
        -:  317:}
        -:  318:
    #####:  319:int handCard(int handPos, struct gameState *state) {
    #####:  320:	int currentPlayer = whoseTurn(state);
    #####:  321:	return state->hand[currentPlayer][handPos];
        -:  322:}
        -:  323:
    #####:  324:int supplyCount(int card, struct gameState *state) {
    #####:  325:	return state->supplyCount[card];
        -:  326:}
        -:  327:
    #####:  328:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  329:	int i;
    #####:  330:	int count = 0;
        -:  331:
    #####:  332:	for (i = 0; i < state->deckCount[player]; i++)
        -:  333:	{
    #####:  334:		if (state->deck[player][i] == card) count++;
        -:  335:	}
        -:  336:
    #####:  337:	for (i = 0; i < state->handCount[player]; i++)
        -:  338:	{
    #####:  339:		if (state->hand[player][i] == card) count++;
        -:  340:	}
        -:  341:
    #####:  342:	for (i = 0; i < state->discardCount[player]; i++)
        -:  343:	{
    #####:  344:		if (state->discard[player][i] == card) count++;
        -:  345:	}
        -:  346:
    #####:  347:	return count;
        -:  348:}
        -:  349:
    12032:  350:int whoseTurn(struct gameState *state) {
    12032:  351:	return state->whoseTurn;
        -:  352:}
        -:  353:
    #####:  354:int endTurn(struct gameState *state) {
        -:  355:	int k;
        -:  356:	int i;
    #####:  357:	int currentPlayer = whoseTurn(state);
        -:  358:
        -:  359:	//Discard hand
    #####:  360:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  361:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  362:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  363:	}
    #####:  364:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:
        -:  366:	//Code for determining the player
    #####:  367:	if (currentPlayer < (state->numPlayers - 1)) {
    #####:  368:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  369:	}
        -:  370:	else {
    #####:  371:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:	}
        -:  373:
    #####:  374:	state->outpostPlayed = 0;
    #####:  375:	state->phase = 0;
    #####:  376:	state->numActions = 1;
    #####:  377:	state->coins = 0;
    #####:  378:	state->numBuys = 1;
    #####:  379:	state->playedCardCount = 0;
    #####:  380:	state->handCount[state->whoseTurn] = 0;
        -:  381:
        -:  382:	//int k; move to top
        -:  383:	//Next player draws hand
    #####:  384:	for (k = 0; k < 5; k++) {
    #####:  385:		drawCard(state->whoseTurn, state);//Draw a card
        -:  386:	}
        -:  387:
        -:  388:	//Update money
    #####:  389:	updateCoins(state->whoseTurn, state, 0);
        -:  390:
    #####:  391:	return 0;
        -:  392:}
        -:  393:
        8:  394:int isGameOver(struct gameState *state) {
        -:  395:	int i;
        -:  396:	int j;
        -:  397:
        -:  398:	//if stack of Province cards is empty, the game ends
        8:  399:	if (state->supplyCount[province] == 0)
        -:  400:	{
        2:  401:		return 1;
        -:  402:	}
        -:  403:
        -:  404:	//if three supply pile are at 0, the game ends
        6:  405:	j = 0;
      156:  406:	for (i = 0; i < 25; i++)
        -:  407:	{
      150:  408:		if (state->supplyCount[i] == 0)
        -:  409:		{
       10:  410:			j++;
        -:  411:		}
        -:  412:	}
        6:  413:	if (j >= 3)
        -:  414:	{
        2:  415:		return 1;
        -:  416:	}
        -:  417:
        4:  418:	return 0;
        -:  419:}
        -:  420:
    #####:  421:int scoreFor(int player, struct gameState *state) {
        -:  422:
        -:  423:	int i;
    #####:  424:	int score = 0;
        -:  425:	//score from hand
    #####:  426:	for (i = 0; i < state->handCount[player]; i++)
        -:  427:	{
    #####:  428:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  429:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  430:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  431:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  432:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  433:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  434:	}
        -:  435:
        -:  436:	//score from discard
    #####:  437:	for (i = 0; i < state->discardCount[player]; i++)
        -:  438:	{
    #####:  439:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  440:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  441:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  442:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  443:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  444:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  445:	}
        -:  446:
        -:  447:	//score from deck
    #####:  448:	for (i = 0; i < state->discardCount[player]; i++)
        -:  449:	{
    #####:  450:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  451:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  452:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  453:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  454:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  455:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  456:	}
        -:  457:
    #####:  458:	return score;
        -:  459:}
        -:  460:
    #####:  461:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  462:	int i;
        -:  463:	int j;
        -:  464:	int highScore;
        -:  465:	int currentPlayer;
        -:  466:
        -:  467:	//get score for each player
    #####:  468:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  469:	{
        -:  470:		//set unused player scores to -9999
    #####:  471:		if (i >= state->numPlayers)
        -:  472:		{
    #####:  473:			players[i] = -9999;
        -:  474:		}
        -:  475:		else
        -:  476:		{
    #####:  477:			players[i] = scoreFor(i, state);
        -:  478:		}
        -:  479:	}
        -:  480:
        -:  481:	//find highest score
    #####:  482:	j = 0;
    #####:  483:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  484:	{
    #####:  485:		if (players[i] > players[j])
        -:  486:		{
    #####:  487:			j = i;
        -:  488:		}
        -:  489:	}
    #####:  490:	highScore = players[j];
        -:  491:
        -:  492:	//add 1 to players who had less turns
    #####:  493:	currentPlayer = whoseTurn(state);
    #####:  494:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  495:	{
    #####:  496:		if (players[i] == highScore && i > currentPlayer)
        -:  497:		{
    #####:  498:			players[i]++;
        -:  499:		}
        -:  500:	}
        -:  501:
        -:  502:	//find new highest score
    #####:  503:	j = 0;
    #####:  504:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:	{
    #####:  506:		if (players[i] > players[j])
        -:  507:		{
    #####:  508:			j = i;
        -:  509:		}
        -:  510:	}
    #####:  511:	highScore = players[j];
        -:  512:
        -:  513:	//set winners in array to 1 and rest to 0
    #####:  514:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:	{
    #####:  516:		if (players[i] == highScore)
        -:  517:		{
    #####:  518:			players[i] = 1;
        -:  519:		}
        -:  520:		else
        -:  521:		{
    #####:  522:			players[i] = 0;
        -:  523:		}
        -:  524:	}
        -:  525:
    #####:  526:	return 0;
        -:  527:}
        -:  528:
    65902:  529:int drawCard(int player, struct gameState *state)
        -:  530:{
        -:  531:	int count;
        -:  532:	int deckCounter;
    65902:  533:	if (state->deckCount[player] <= 0) {//Deck is empty
        -:  534:
        -:  535:	  //Step 1 Shuffle the discard pile back into a deck
        -:  536:		int i;
        -:  537:		//Move discard to deck
     4395:  538:		for (i = 0; i < state->discardCount[player]; i++) {
     3921:  539:			state->deck[player][i] = state->discard[player][i];
     3921:  540:			state->discard[player][i] = -1;
        -:  541:		}
        -:  542:
      474:  543:		state->deckCount[player] = state->discardCount[player];
      474:  544:		state->discardCount[player] = 0;//Reset discard
        -:  545:
        -:  546:		//Shufffle the deck
      474:  547:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  548:
        -:  549:		if (DEBUG) {//Debug statements
        -:  550:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  551:		}
        -:  552:
      474:  553:		state->discardCount[player] = 0;
        -:  554:
        -:  555:		//Step 2 Draw Card
      474:  556:		count = state->handCount[player];//Get current player's hand count
        -:  557:
        -:  558:		if (DEBUG) {//Debug statements
        -:  559:			printf("Current hand count: %d\n", count);
        -:  560:		}
        -:  561:
      474:  562:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  563:
      474:  564:		if (deckCounter == 0)
    #####:  565:			return -1;
        -:  566:
      474:  567:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      474:  568:		state->deckCount[player]--;
      474:  569:		state->handCount[player]++;//Increment hand count
        -:  570:	}
        -:  571:
        -:  572:	else {
    65428:  573:		int count = state->handCount[player];//Get current hand count for player
        -:  574:		int deckCounter;
        -:  575:		if (DEBUG) {//Debug statements
        -:  576:			printf("Current hand count: %d\n", count);
        -:  577:		}
        -:  578:
    65428:  579:		deckCounter = state->deckCount[player];//Create holder for the deck count
    65428:  580:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    65428:  581:		state->deckCount[player]--;
    65428:  582:		state->handCount[player]++;//Increment hand count
        -:  583:	}
        -:  584:
    65902:  585:	return 0;
        -:  586:}
        -:  587:
       56:  588:int getCost(int cardNumber)
        -:  589:{
       56:  590:	switch (cardNumber)
        -:  591:	{
        -:  592:	case curse:
        2:  593:		return 0;
        -:  594:	case estate:
        2:  595:		return 2;
        -:  596:	case duchy:
        2:  597:		return 5;
        -:  598:	case province:
        2:  599:		return 8;
        -:  600:	case copper:
        2:  601:		return 0;
        -:  602:	case silver:
        2:  603:		return 3;
        -:  604:	case gold:
        2:  605:		return 6;
        -:  606:	case adventurer:
        2:  607:		return 6;
        -:  608:	case council_room:
        2:  609:		return 5;
        -:  610:	case feast:
        2:  611:		return 4;
        -:  612:	case gardens:
        2:  613:		return 4;
        -:  614:	case mine:
        2:  615:		return 5;
        -:  616:	case remodel:
        2:  617:		return 4;
        -:  618:	case smithy:
        2:  619:		return 4;
        -:  620:	case village:
        2:  621:		return 3;
        -:  622:	case baron:
        2:  623:		return 4;
        -:  624:	case great_hall:
        2:  625:		return 3;
        -:  626:	case minion:
        2:  627:		return 5;
        -:  628:	case steward:
        2:  629:		return 3;
        -:  630:	case tribute:
        2:  631:		return 5;
        -:  632:	case ambassador:
        2:  633:		return 3;
        -:  634:	case cutpurse:
        2:  635:		return 4;
        -:  636:	case embargo:
        2:  637:		return 2;
        -:  638:	case outpost:
        2:  639:		return 5;
        -:  640:	case salvager:
        2:  641:		return 4;
        -:  642:	case sea_hag:
        2:  643:		return 4;
        -:  644:	case treasure_map:
        2:  645:		return 4;
        -:  646:	}
        -:  647:
        2:  648:	return -1;
        -:  649:}
        -:  650:
     2002:  651:int playAdventurer(struct gameState *state) {
     2002:  652:	int drawntreasure = 0;
        -:  653:	int cardDrawn;
        -:  654:	int temphand[MAX_HAND];
     2002:  655:	int currentPlayer = whoseTurn(state);
     2002:  656:	int z = 0;// this is the counter for the temp hand
        -:  657:	
    31826:  658:	while (drawntreasure < 2) {
    27822:  659:		if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
      474:  660:			shuffle(currentPlayer, state);
        -:  661:		}
    27822:  662:		drawCard(currentPlayer, state);
    27822:  663:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    27822:  664:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     4004:  665:			drawntreasure++;
        -:  666:		else {
    23818:  667:			temphand[z] = cardDrawn;
    23818:  668:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    23818:  669:			z++;
        -:  670:		}
        -:  671:	}
    27822:  672:	while (z - 1 >= 0) {
    23818:  673:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        -:  674:		// z = z + 1; <-- teammate's buggy code
    23818:  675:		z = z - 1; // fixed code to prevent seg fault
        -:  676:	}
     2002:  677:	return 0;
        -:  678:}
        -:  679:
    #####:  680:int playCouncilRoom(struct gameState *state, int handPos) {
        -:  681:	int i;
    #####:  682:	int currentPlayer = whoseTurn(state);
        -:  683:
        -:  684:	//+4 Cards
    #####:  685:	for (i = 0; i < 4; i++)
        -:  686:	{
    #####:  687:		drawCard(currentPlayer, state);
        -:  688:	}
        -:  689:
        -:  690:	//+1 Buy
    #####:  691:	state->numBuys++;
        -:  692:
        -:  693:	//Each other player draws a card
    #####:  694:	for (i = 0; i < state->numPlayers; i++)
        -:  695:	{
    #####:  696:		if (i != currentPlayer)
        -:  697:		{
    #####:  698:			drawCard(i, state);
        -:  699:		}
        -:  700:	}
        -:  701:
        -:  702:	//put played card in played card pile
    #####:  703:	discardCard(handPos, currentPlayer, state, 0);
        -:  704:
    #####:  705:	return 0;
        -:  706:}
        -:  707:
    #####:  708:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos) {
        -:  709:	int i;
        -:  710:	int j;
    #####:  711:	int currentPlayer = whoseTurn(state);
        -:  712:
    #####:  713:	j = state->hand[currentPlayer][choice2];  //store card we will trash
        -:  714:
    #####:  715:	if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  716:	{
    #####:  717:		return -1;
        -:  718:	}
        -:  719:
    #####:  720:	gainCard(choice2, state, 0, currentPlayer);
        -:  721:
        -:  722:	//discard card from hand
    #####:  723:	discardCard(handPos, currentPlayer, state, 0);
        -:  724:
        -:  725:	//discard trashed card
    #####:  726:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  727:	{
    #####:  728:		if (state->hand[currentPlayer][i] == j)
        -:  729:		{
    #####:  730:			discardCard(i, currentPlayer, state, 0);
    #####:  731:			break;
        -:  732:		}
        -:  733:	}
        -:  734:
    #####:  735:	return 0;
        -:  736:}
        -:  737:
     2002:  738:int playSmithy(struct gameState *state, int handPos) {
        -:  739:	int i;
     2002:  740:	int currentPlayer = whoseTurn(state);
        -:  741:
        -:  742:	//+3 Cards
        -:  743:	//for (i = 0; i < 5; i++)						// TEAMMATE BUG: 3 was changed to 5.
        -:  744:	//{
        -:  745:	//	drawCard(currentPlayer, state);
        -:  746:	//}
        -:  747:
     8008:  748:	for (i = 0; i < 3; i++)						
        -:  749:	{
     6006:  750:		drawCard(currentPlayer, state);
        -:  751:	}
        -:  752:
        -:  753:	//discard card from hand
     2002:  754:	discardCard(handPos, currentPlayer, state, 0);
     2002:  755:	return 0;
        -:  756:}
        -:  757:
     2002:  758:int playVillage(struct gameState *state, int handPos) {
     2002:  759:	int currentPlayer = whoseTurn(state);
        -:  760:
        -:  761:	//+1 Card
     2002:  762:	drawCard(currentPlayer, state);
        -:  763:
        -:  764:	//+2 Actions
        -:  765:	//state->numActions = state->numActions + 3;		// TEAMMATE BUG: +3 actions instead of +2
     2002:  766:	state->numActions = state->numActions + 2;	
        -:  767:
        -:  768:	//discard played card from hand
     2002:  769:	discardCard(handPos, currentPlayer, state, 0);
     2002:  770:	return 0;
        -:  771:}
        -:  772:
     6008:  773:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  774:{
        -:  775:	int i;
        -:  776:	int j;
        -:  777:	int k;
        -:  778:	int x;
        -:  779:	int index;
     6008:  780:	int currentPlayer = whoseTurn(state);
     6008:  781:	int nextPlayer = currentPlayer + 1;
        -:  782:
     6008:  783:	int tributeRevealedCards[2] = { -1, -1 };
        -:  784:	int temphand[MAX_HAND];// moved above the if statement
        -:  785:	
     6008:  786:	if (nextPlayer > (state->numPlayers - 1)) {
     1414:  787:		nextPlayer = 0;
        -:  788:	}
        -:  789:
        -:  790:
        -:  791:	//uses switch to select card and perform actions
     6008:  792:	switch (card)
        -:  793:	{
        -:  794:	case adventurer:
     2002:  795:		return playAdventurer(state);		// TEAMMATE BUG FIXED: added "return" in front of playAdventurer
        -:  796:		break;
        -:  797:
        -:  798:	case council_room:
    #####:  799:		playCouncilRoom(state, handPos);
    #####:  800:		break;
        -:  801:
        -:  802:	case feast:
        -:  803:		//gain card with cost up to 5
        -:  804:		//Backup hand
    #####:  805:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  806:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  807:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  808:		}
        -:  809:		//Backup hand
        -:  810:
        -:  811:		//Update Coins for Buy
    #####:  812:		updateCoins(currentPlayer, state, 5);
    #####:  813:		x = 1;//Condition to loop on
    #####:  814:		while (x == 1) {//Buy one card
    #####:  815:			if (supplyCount(choice1, state) <= 0) {
        -:  816:				if (DEBUG)
        -:  817:					printf("None of that card left, sorry!\n");
        -:  818:
        -:  819:				if (DEBUG) {
        -:  820:					printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  821:				}
        -:  822:			}
    #####:  823:			else if (state->coins < getCost(choice1)) {
    #####:  824:				printf("That card is too expensive!\n");
        -:  825:
        -:  826:				if (DEBUG) {
        -:  827:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  828:				}
        -:  829:			}
        -:  830:			else {
        -:  831:
        -:  832:				if (DEBUG) {
        -:  833:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  834:				}
        -:  835:
    #####:  836:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  837:				x = 0;//No more buying cards
        -:  838:
        -:  839:				if (DEBUG) {
        -:  840:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  841:				}
        -:  842:
        -:  843:			}
        -:  844:		}
        -:  845:
        -:  846:		//Reset Hand
    #####:  847:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  848:			state->hand[currentPlayer][i] = temphand[i];
    #####:  849:			temphand[i] = -1;
        -:  850:		}
        -:  851:		//Reset Hand
        -:  852:
    #####:  853:		return 0;
        -:  854:
        -:  855:	case gardens:
    #####:  856:		return -1;
        -:  857:
        -:  858:	case mine:
    #####:  859:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  860:
    #####:  861:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  862:		{
    #####:  863:			return -1;
        -:  864:		}
        -:  865:
    #####:  866:		if (choice2 > treasure_map || choice2 < curse)
        -:  867:		{
    #####:  868:			return -1;
        -:  869:		}
        -:  870:
    #####:  871:		if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  872:		{
    #####:  873:			return -1;
        -:  874:		}
        -:  875:
    #####:  876:		gainCard(choice2, state, 2, currentPlayer);
        -:  877:
        -:  878:		//discard card from hand
    #####:  879:		discardCard(handPos, currentPlayer, state, 0);
        -:  880:
        -:  881:		//discard trashed card
    #####:  882:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  883:		{
    #####:  884:			if (state->hand[currentPlayer][i] == j)
        -:  885:			{
    #####:  886:				discardCard(i, currentPlayer, state, 0);
    #####:  887:				break;
        -:  888:			}
        -:  889:		}
        -:  890:
    #####:  891:		return 0;
        -:  892:
        -:  893:	case remodel:
    #####:  894:		playRemodel(state, choice1, choice2, handPos);
    #####:  895:		break;
        -:  896:
        -:  897:	case smithy:
     2002:  898:		return playSmithy(state, handPos);
        -:  899:		break;
        -:  900:		
        -:  901:	case village:
     2002:  902:		return playVillage(state, handPos);
        -:  903:		break;
        -:  904:		
        -:  905:	case baron:
    #####:  906:		state->numBuys++;//Increase buys by 1!
    #####:  907:		if (choice1 > 0) {//Boolean true or going to discard an estate
    #####:  908:			int p = 0;//Iterator for hand!
    #####:  909:			int card_not_discarded = 1;//Flag for discard set!
    #####:  910:			while (card_not_discarded) {
    #####:  911:				if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####:  912:					state->coins += 4;//Add 4 coins to the amount of coins
    #####:  913:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  914:					state->discardCount[currentPlayer]++;
    #####:  915:					for (; p < state->handCount[currentPlayer]; p++) {
    #####:  916:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  917:					}
    #####:  918:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  919:					state->handCount[currentPlayer]--;
    #####:  920:					card_not_discarded = 0;//Exit the loop
        -:  921:				}
    #####:  922:				else if (p > state->handCount[currentPlayer]) {
        -:  923:					if (DEBUG) {
        -:  924:						printf("No estate cards in your hand, invalid choice\n");
        -:  925:						printf("Must gain an estate if there are any\n");
        -:  926:					}
    #####:  927:					if (supplyCount(estate, state) > 0) {
    #####:  928:						gainCard(estate, state, 0, currentPlayer);
    #####:  929:						state->supplyCount[estate]--;//Decrement estates
    #####:  930:						if (supplyCount(estate, state) == 0) {
    #####:  931:							isGameOver(state);
        -:  932:						}
        -:  933:					}
    #####:  934:					card_not_discarded = 0;//Exit the loop
        -:  935:				}
        -:  936:
        -:  937:				else {
    #####:  938:					p++;//Next card
        -:  939:				}
        -:  940:			}
        -:  941:		}
        -:  942:
        -:  943:		else {
    #####:  944:			if (supplyCount(estate, state) > 0) {
    #####:  945:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  946:				state->supplyCount[estate]--;//Decrement Estates
    #####:  947:				if (supplyCount(estate, state) == 0) {
    #####:  948:					isGameOver(state);
        -:  949:				}
        -:  950:			}
        -:  951:		}
        -:  952:
        -:  953:
    #####:  954:		return 0;
        -:  955:
        -:  956:	case great_hall:
        -:  957:		//+1 Card
        2:  958:		drawCard(currentPlayer, state);
        -:  959:
        -:  960:		//+1 Actions
        2:  961:		state->numActions++;
        -:  962:
        -:  963:		//discard card from hand
        2:  964:		discardCard(handPos, currentPlayer, state, 0);
        2:  965:		return 0;
        -:  966:
        -:  967:	case minion:
        -:  968:		//+1 action
    #####:  969:		state->numActions++;
        -:  970:
        -:  971:		//discard card from hand
    #####:  972:		discardCard(handPos, currentPlayer, state, 0);
        -:  973:
    #####:  974:		if (choice1)		//+2 coins
        -:  975:		{
    #####:  976:			state->coins = state->coins + 2;
        -:  977:		}
        -:  978:
    #####:  979:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  980:		{
        -:  981:			//discard hand
    #####:  982:			while (numHandCards(state) > 0)
        -:  983:			{
    #####:  984:				discardCard(handPos, currentPlayer, state, 0);
        -:  985:			}
        -:  986:
        -:  987:			//draw 4
    #####:  988:			for (i = 0; i < 4; i++)
        -:  989:			{
    #####:  990:				drawCard(currentPlayer, state);
        -:  991:			}
        -:  992:
        -:  993:			//other players discard hand and redraw if hand size > 4
    #####:  994:			for (i = 0; i < state->numPlayers; i++)
        -:  995:			{
    #####:  996:				if (i != currentPlayer)
        -:  997:				{
    #####:  998:					if (state->handCount[i] > 4)
        -:  999:					{
        -: 1000:						//discard hand
    #####: 1001:						while (state->handCount[i] > 0)
        -: 1002:						{
    #####: 1003:							discardCard(handPos, i, state, 0);
        -: 1004:						}
        -: 1005:
        -: 1006:						//draw 4
    #####: 1007:						for (j = 0; j < 4; j++)
        -: 1008:						{
    #####: 1009:							drawCard(i, state);
        -: 1010:						}
        -: 1011:					}
        -: 1012:				}
        -: 1013:			}
        -: 1014:
        -: 1015:		}
    #####: 1016:		return 0;
        -: 1017:
        -: 1018:	case steward:
    #####: 1019:		if (choice1 == 1)
        -: 1020:		{
        -: 1021:			//+2 cards
    #####: 1022:			drawCard(currentPlayer, state);
    #####: 1023:			drawCard(currentPlayer, state);
        -: 1024:		}
    #####: 1025:		else if (choice1 == 2)
        -: 1026:		{
        -: 1027:			//+2 coins
    #####: 1028:			state->coins = state->coins + 2;
        -: 1029:		}
        -: 1030:		else
        -: 1031:		{
        -: 1032:			//trash 2 cards in hand
    #####: 1033:			discardCard(choice2, currentPlayer, state, 1);
    #####: 1034:			discardCard(choice3, currentPlayer, state, 1);
        -: 1035:		}
        -: 1036:
        -: 1037:		//discard card from hand
    #####: 1038:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1039:		return 0;
        -: 1040:
        -: 1041:	case tribute:
    #####: 1042:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####: 1043:			if (state->deckCount[nextPlayer] > 0) {
    #####: 1044:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1045:				state->deckCount[nextPlayer]--;
        -: 1046:			}
    #####: 1047:			else if (state->discardCount[nextPlayer] > 0) {
    #####: 1048:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1049:				state->discardCount[nextPlayer]--;
        -: 1050:			}
        -: 1051:			else {
        -: 1052:				//No Card to Reveal
        -: 1053:				if (DEBUG) {
        -: 1054:					printf("No cards to reveal\n");
        -: 1055:				}
        -: 1056:			}
        -: 1057:		}
        -: 1058:
        -: 1059:		else {
    #####: 1060:			if (state->deckCount[nextPlayer] == 0) {
    #####: 1061:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####: 1062:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1063:					state->deckCount[nextPlayer]++;
    #####: 1064:					state->discard[nextPlayer][i] = -1;
    #####: 1065:					state->discardCount[nextPlayer]--;
        -: 1066:				}
        -: 1067:
    #####: 1068:				shuffle(nextPlayer, state);//Shuffle the deck
        -: 1069:			}
    #####: 1070:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1071:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1072:			state->deckCount[nextPlayer]--;
    #####: 1073:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1074:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1075:			state->deckCount[nextPlayer]--;
        -: 1076:		}
        -: 1077:
    #####: 1078:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one 
    #####: 1079:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1080:			state->playedCardCount++;
    #####: 1081:			tributeRevealedCards[1] = -1;
        -: 1082:		}
        -: 1083:
    #####: 1084:		for (i = 0; i <= 2; i++) {
    #####: 1085:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
    #####: 1086:				state->coins += 2;
        -: 1087:			}
        -: 1088:
    #####: 1089:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####: 1090:				drawCard(currentPlayer, state);
    #####: 1091:				drawCard(currentPlayer, state);
        -: 1092:			}
        -: 1093:			else {//Action Card
    #####: 1094:				state->numActions = state->numActions + 2;
        -: 1095:			}
        -: 1096:		}
        -: 1097:
    #####: 1098:		return 0;
        -: 1099:
        -: 1100:	case ambassador:
    #####: 1101:		j = 0;		//used to check if player has enough cards to discard
        -: 1102:
    #####: 1103:		if (choice2 > 2 || choice2 < 0)
        -: 1104:		{
    #####: 1105:			return -1;
        -: 1106:		}
        -: 1107:
    #####: 1108:		if (choice1 == handPos)
        -: 1109:		{
    #####: 1110:			return -1;
        -: 1111:		}
        -: 1112:
    #####: 1113:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1114:		{
    #####: 1115:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1116:			{
    #####: 1117:				j++;
        -: 1118:			}
        -: 1119:		}
    #####: 1120:		if (j < choice2)
        -: 1121:		{
    #####: 1122:			return -1;
        -: 1123:		}
        -: 1124:
        -: 1125:		if (DEBUG)
        -: 1126:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1127:
        -: 1128:		//increase supply count for choosen card by amount being discarded
    #####: 1129:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1130:
        -: 1131:		//each other player gains a copy of revealed card
    #####: 1132:		for (i = 0; i < state->numPlayers; i++)
        -: 1133:		{
    #####: 1134:			if (i != currentPlayer)
        -: 1135:			{
    #####: 1136:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1137:			}
        -: 1138:		}
        -: 1139:
        -: 1140:		//discard played card from hand
    #####: 1141:		discardCard(handPos, currentPlayer, state, 0);
        -: 1142:
        -: 1143:		//trash copies of cards returned to supply
    #####: 1144:		for (j = 0; j < choice2; j++)
        -: 1145:		{
    #####: 1146:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1147:			{
    #####: 1148:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1149:				{
    #####: 1150:					discardCard(i, currentPlayer, state, 1);
    #####: 1151:					break;
        -: 1152:				}
        -: 1153:			}
        -: 1154:		}
        -: 1155:
    #####: 1156:		return 0;
        -: 1157:
        -: 1158:	case cutpurse:
        -: 1159:
    #####: 1160:		updateCoins(currentPlayer, state, 2);
    #####: 1161:		for (i = 0; i < state->numPlayers; i++)
        -: 1162:		{
    #####: 1163:			if (i != currentPlayer)
        -: 1164:			{
    #####: 1165:				for (j = 0; j < state->handCount[i]; j++)
        -: 1166:				{
    #####: 1167:					if (state->hand[i][j] == copper)
        -: 1168:					{
    #####: 1169:						discardCard(j, i, state, 0);
    #####: 1170:						break;
        -: 1171:					}
    #####: 1172:					if (j == state->handCount[i])
        -: 1173:					{
    #####: 1174:						for (k = 0; k < state->handCount[i]; k++)
        -: 1175:						{
        -: 1176:							if (DEBUG)
        -: 1177:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1178:						}
    #####: 1179:						break;
        -: 1180:					}
        -: 1181:				}
        -: 1182:
        -: 1183:			}
        -: 1184:
        -: 1185:		}
        -: 1186:
        -: 1187:		//discard played card from hand
    #####: 1188:		discardCard(handPos, currentPlayer, state, 0);
        -: 1189:
    #####: 1190:		return 0;
        -: 1191:
        -: 1192:
        -: 1193:	case embargo:
        -: 1194:		//+2 Coins
    #####: 1195:		state->coins = state->coins + 2;
        -: 1196:
        -: 1197:		//see if selected pile is in play
    #####: 1198:		if (state->supplyCount[choice1] == -1)
        -: 1199:		{
    #####: 1200:			return -1;
        -: 1201:		}
        -: 1202:
        -: 1203:		//add embargo token to selected supply pile
    #####: 1204:		state->embargoTokens[choice1]++;
        -: 1205:
        -: 1206:		//trash card
    #####: 1207:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1208:		return 0;
        -: 1209:
        -: 1210:	case outpost:
        -: 1211:		//set outpost flag
    #####: 1212:		state->outpostPlayed++;
        -: 1213:
        -: 1214:		//discard card
    #####: 1215:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1216:		return 0;
        -: 1217:
        -: 1218:	case salvager:
        -: 1219:		//+1 buy
    #####: 1220:		state->numBuys++;
        -: 1221:
    #####: 1222:		if (choice1)
        -: 1223:		{
        -: 1224:			//gain coins equal to trashed card
    #####: 1225:			state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1226:			//trash card
    #####: 1227:			discardCard(choice1, currentPlayer, state, 1);
        -: 1228:		}
        -: 1229:
        -: 1230:		//discard card
    #####: 1231:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1232:		return 0;
        -: 1233:
        -: 1234:	case sea_hag:
    #####: 1235:		for (i = 0; i < state->numPlayers; i++) {
    #####: 1236:			if (i != currentPlayer) {
    #####: 1237:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1238:				state->discardCount[i]++;
    #####: 1239:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1240:			}
        -: 1241:		}
    #####: 1242:		return 0;
        -: 1243:
        -: 1244:	case treasure_map:
        -: 1245:		//search hand for another treasure_map
    #####: 1246:		index = -1;
    #####: 1247:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1248:		{
    #####: 1249:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1250:			{
    #####: 1251:				index = i;
    #####: 1252:				break;
        -: 1253:			}
        -: 1254:		}
    #####: 1255:		if (index > -1)
        -: 1256:		{
        -: 1257:			//trash both treasure cards
    #####: 1258:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1259:			discardCard(index, currentPlayer, state, 1);
        -: 1260:
        -: 1261:			//gain 4 Gold cards
    #####: 1262:			for (i = 0; i < 4; i++)
        -: 1263:			{
    #####: 1264:				gainCard(gold, state, 1, currentPlayer);
        -: 1265:			}
        -: 1266:
        -: 1267:			//return success
    #####: 1268:			return 1;
        -: 1269:		}
        -: 1270:
        -: 1271:		//no second treasure_map found in hand
    #####: 1272:		return -1;
        -: 1273:	}
        -: 1274:
    #####: 1275:	return -1;
        -: 1276:}
        -: 1277:
     4006: 1278:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1279:{
        -: 1280:
        -: 1281:	//if card is not trashed, added to Played pile 
     4006: 1282:	if (trashFlag < 1)
        -: 1283:	{
        -: 1284:		//add card to played pile
     4006: 1285:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     4006: 1286:		state->playedCardCount++;
        -: 1287:	}
        -: 1288:
        -: 1289:	//set played card to -1
     4006: 1290:	state->hand[currentPlayer][handPos] = -1;
        -: 1291:
        -: 1292:	//remove card from player's hand
     4006: 1293:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
        -: 1294:	{
        -: 1295:		//reduce number of cards in hand
    #####: 1296:		state->handCount[currentPlayer]--;
        -: 1297:	}
     4006: 1298:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1299:	{
        -: 1300:		//reduce number of cards in hand
    #####: 1301:		state->handCount[currentPlayer]--;
        -: 1302:	}
        -: 1303:	else
        -: 1304:	{
        -: 1305:		//replace discarded card with last card in hand
     4006: 1306:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1307:		//set last card to -1
     4006: 1308:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1309:		//reduce number of cards in hand
     4006: 1310:		state->handCount[currentPlayer]--;
        -: 1311:	}
        -: 1312:
     4006: 1313:	return 0;
        -: 1314:}
        -: 1315:
    #####: 1316:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1317:{
        -: 1318:	//Note: supplyPos is enum of choosen card
        -: 1319:
        -: 1320:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1321:	if (supplyCount(supplyPos, state) < 1)
        -: 1322:	{
    #####: 1323:		return -1;
        -: 1324:	}
        -: 1325:
        -: 1326:	//added card for [whoseTurn] current player:
        -: 1327:	// toFlag = 0 : add to discard
        -: 1328:	// toFlag = 1 : add to deck
        -: 1329:	// toFlag = 2 : add to hand
        -: 1330:
    #####: 1331:	if (toFlag == 1)
        -: 1332:	{
    #####: 1333:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1334:		state->deckCount[player]++;
        -: 1335:	}
    #####: 1336:	else if (toFlag == 2)
        -: 1337:	{
    #####: 1338:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1339:		state->handCount[player]++;
        -: 1340:	}
        -: 1341:	else
        -: 1342:	{
    #####: 1343:		state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1344:		state->discardCount[player]++;
        -: 1345:	}
        -: 1346:
        -: 1347:	//decrease number in supply pile
    #####: 1348:	state->supplyCount[supplyPos]--;
        -: 1349:
    #####: 1350:	return 0;
        -: 1351:}
        -: 1352:
     6020: 1353:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1354:{
        -: 1355:	int i;
        -: 1356:
        -: 1357:	//reset coin count
     6020: 1358:	state->coins = 0;
        -: 1359:
        -: 1360:	//add coins for each Treasure card in player's hand
    36150: 1361:	for (i = 0; i < state->handCount[player]; i++)
        -: 1362:	{
    30130: 1363:		if (state->hand[player][i] == copper)
        -: 1364:		{
    24062: 1365:			state->coins += 1;
        -: 1366:		}
     6068: 1367:		else if (state->hand[player][i] == silver)
        -: 1368:		{
        6: 1369:			state->coins += 2;
        -: 1370:		}
     6062: 1371:		else if (state->hand[player][i] == gold)
        -: 1372:		{
        6: 1373:			state->coins += 3;
        -: 1374:		}
        -: 1375:	}
        -: 1376:
        -: 1377:	//add bonus
     6020: 1378:	state->coins += bonus;
        -: 1379:
     6020: 1380:	return 0;
        -: 1381:}
File 'dominion.c'
Lines executed:37.17% of 565
Branches executed:36.21% of 417
Taken at least once:30.22% of 417
Calls executed:23.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:19
        -:    0:Programs:19
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
function compare called 306591 returned 100% blocks executed 100%
   306591:    9:int compare(const void* a, const void* b) {
   306591:   10:	if (*(int*)a > *(int*)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     2921:   11:		return 1;
   303670:   12:	if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    82136:   13:		return -1;
   221534:   14:	return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:	return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:	int k8, int k9, int k10) {
    #####:   24:	int* k = malloc(10 * sizeof(int));
    #####:   25:	k[0] = k1;
    #####:   26:	k[1] = k2;
    #####:   27:	k[2] = k3;
    #####:   28:	k[3] = k4;
    #####:   29:	k[4] = k5;
    #####:   30:	k[5] = k6;
    #####:   31:	k[6] = k7;
    #####:   32:	k[7] = k8;
    #####:   33:	k[8] = k9;
    #####:   34:	k[9] = k10;
    #####:   35:	return k;
        -:   36:}
        -:   37:
function initializeGame called 6014 returned 100% blocks executed 95%
     6014:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:	struct gameState *state) {
        -:   40:
        -:   41:	int i;
        -:   42:	int j;
        -:   43:	int it;
        -:   44:	//set up random number generator
     6014:   45:	SelectStream(1);
call    0 returned 100%
     6014:   46:	PutSeed((long)randomSeed);
call    0 returned 100%
        -:   47:
        -:   48:	//check number of players
     6014:   49:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   50:	{
    #####:   51:		return -1;
        -:   52:	}
        -:   53:
        -:   54:	//set number of players
     6014:   55:	state->numPlayers = numPlayers;
        -:   56:
        -:   57:	//check selected kingdom cards are different
    66154:   58:	for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   59:	{
   661540:   60:		for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   61:		{
   601400:   62:			if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   63:			{
    #####:   64:				return -1;
        -:   65:			}
        -:   66:		}
        -:   67:	}
        -:   68:
        -:   69:
        -:   70:	//initialize supply
        -:   71:	///////////////////////////////
        -:   72:
        -:   73:	//set number of Curse cards
     6014:   74:	if (numPlayers == 2)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
        -:   75:	{
     1406:   76:		state->supplyCount[curse] = 10;
        -:   77:	}
     4608:   78:	else if (numPlayers == 3)
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
        -:   79:	{
     1304:   80:		state->supplyCount[curse] = 20;
        -:   81:	}
        -:   82:	else
        -:   83:	{
     3304:   84:		state->supplyCount[curse] = 30;
        -:   85:	}
        -:   86:
        -:   87:	//set number of Victory cards
     6014:   88:	if (numPlayers == 2)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
        -:   89:	{
     1406:   90:		state->supplyCount[estate] = 8;
     1406:   91:		state->supplyCount[duchy] = 8;
     1406:   92:		state->supplyCount[province] = 8;
        -:   93:	}
        -:   94:	else
        -:   95:	{
     4608:   96:		state->supplyCount[estate] = 12;
     4608:   97:		state->supplyCount[duchy] = 12;
     4608:   98:		state->supplyCount[province] = 12;
        -:   99:	}
        -:  100:
        -:  101:	//set number of Treasure cards
     6014:  102:	state->supplyCount[copper] = 60 - (7 * numPlayers);
     6014:  103:	state->supplyCount[silver] = 40;
     6014:  104:	state->supplyCount[gold] = 30;
        -:  105:
        -:  106:	//set number of Kingdom cards
   126294:  107:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  108:	{
   992310:  109:		for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  110:		{
   932170:  111:			if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  112:			{
        -:  113:				//check if card is a 'Victory' Kingdom card
    60140:  114:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  115:				{
    24044:  116:					if (numPlayers == 2) {
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
     2808:  117:						state->supplyCount[i] = 8;
        -:  118:					}
     9214:  119:					else { state->supplyCount[i] = 12; }
        -:  120:				}
        -:  121:				else
        -:  122:				{
    48118:  123:					state->supplyCount[i] = 10;
        -:  124:				}
    60140:  125:				break;
        -:  126:			}
        -:  127:			else    //card is not in the set choosen for the game
        -:  128:			{
   872030:  129:				state->supplyCount[i] = -1;
        -:  130:			}
        -:  131:		}
        -:  132:
        -:  133:	}
        -:  134:
        -:  135:	////////////////////////
        -:  136:	//supply intilization complete
        -:  137:
        -:  138:	//set player decks
    25954:  139:	for (i = 0; i < numPlayers; i++)
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  140:	{
    19940:  141:		state->deckCount[i] = 0;
    79760:  142:		for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  143:		{
    59820:  144:			state->deck[i][j] = estate;
    59820:  145:			state->deckCount[i]++;
        -:  146:		}
   159520:  147:		for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  148:		{
   139580:  149:			state->deck[i][j] = copper;
   139580:  150:			state->deckCount[i]++;
        -:  151:		}
        -:  152:	}
        -:  153:
        -:  154:	//shuffle player decks
    25954:  155:	for (i = 0; i < numPlayers; i++)
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  156:	{
    19940:  157:		if (shuffle(i, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  158:		{
    #####:  159:			return -1;
        -:  160:		}
        -:  161:	}
        -:  162:
        -:  163:	//draw player hands
    25954:  164:	for (i = 0; i < numPlayers; i++)
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  165:	{
        -:  166:		//initialize hand size to zero
    19940:  167:		state->handCount[i] = 0;
    19940:  168:		state->discardCount[i] = 0;
        -:  169:		//draw 5 cards
        -:  170:		// for (j = 0; j < 5; j++)
        -:  171:		//	{
        -:  172:		//	  drawCard(i, state);
        -:  173:		//	}
        -:  174:	}
        -:  175:
        -:  176:	//set embargo tokens to 0 for all supply piles
   168392:  177:	for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  178:	{
   162378:  179:		state->embargoTokens[i] = 0;
        -:  180:	}
        -:  181:
        -:  182:	//initialize first player's turn
     6014:  183:	state->outpostPlayed = 0;
     6014:  184:	state->phase = 0;
     6014:  185:	state->numActions = 1;
     6014:  186:	state->numBuys = 1;
     6014:  187:	state->playedCardCount = 0;
     6014:  188:	state->whoseTurn = 0;
     6014:  189:	state->handCount[state->whoseTurn] = 0;
        -:  190:	//int it; move to top
        -:  191:
        -:  192:	//Moved draw cards to here, only drawing at the start of a turn
    36084:  193:	for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    30070:  194:		drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  195:	}
        -:  196:
     6014:  197:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  198:
     6014:  199:	return 0;
        -:  200:}
        -:  201:
function shuffle called 20888 returned 100% blocks executed 100%
    20888:  202:int shuffle(int player, struct gameState *state) {
        -:  203:
        -:  204:
        -:  205:	int newDeck[MAX_DECK];
    20888:  206:	int newDeckPos = 0;
        -:  207:	int card;
        -:  208:	int i;
        -:  209:
    20888:  210:	if (state->deckCount[player] < 1)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
      474:  211:		return -1;
    20414:  212:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  213:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
   244149:  215:	while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   203321:  216:		card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
   203321:  217:		newDeck[newDeckPos] = state->deck[player][card];
   203321:  218:		newDeckPos++;
   634560:  219:		for (i = card; i < state->deckCount[player] - 1; i++) {
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
   431239:  220:			state->deck[player][i] = state->deck[player][i + 1];
        -:  221:		}
   203321:  222:		state->deckCount[player]--;
        -:  223:	}
   223735:  224:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   203321:  225:		state->deck[player][i] = newDeck[i];
   203321:  226:		state->deckCount[player]++;
        -:  227:	}
        -:  228:
    20414:  229:	return 0;
        -:  230:}
        -:  231:
function playCard called 0 returned 0% blocks executed 0%
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  233:{
        -:  234:	int card;
    #####:  235:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:	//check if it is the right phase
    #####:  238:	if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  239:	{
    #####:  240:		return -1;
        -:  241:	}
        -:  242:
        -:  243:	//check if player has enough actions
    #####:  244:	if (state->numActions < 1)
branch  0 never executed
branch  1 never executed
        -:  245:	{
    #####:  246:		return -1;
        -:  247:	}
        -:  248:
        -:  249:	//get card played
    #####:  250:	card = handCard(handPos, state);
call    0 never executed
        -:  251:
        -:  252:	//check if selected card is an action
    #####:  253:	if (card < adventurer || card > treasure_map)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  254:	{
    #####:  255:		return -1;
        -:  256:	}
        -:  257:
        -:  258:	//play card
    #####:  259:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  260:	{
    #####:  261:		return -1;
        -:  262:	}
        -:  263:
        -:  264:	//reduce number of actions
    #####:  265:	state->numActions--;
        -:  266:
        -:  267:	//update coins (Treasure cards may be added with card draws)
    #####:  268:	updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  269:
    #####:  270:	return 0;
        -:  271:}
        -:  272:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:	int who;
        -:  275:	if (DEBUG) {
        -:  276:		printf("Entering buyCard...\n");
        -:  277:	}
        -:  278:
        -:  279:	// I don't know what to do about the phase thing.
        -:  280:
    #####:  281:	who = state->whoseTurn;
        -:  282:
    #####:  283:	if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  284:		if (DEBUG)
        -:  285:			printf("You do not have any buys left\n");
    #####:  286:		return -1;
        -:  287:	}
    #####:  288:	else if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:		if (DEBUG)
        -:  290:			printf("There are not any of that type of card left\n");
    #####:  291:		return -1;
        -:  292:	}
    #####:  293:	else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  294:		if (DEBUG)
        -:  295:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:		return -1;
        -:  297:	}
        -:  298:	else {
    #####:  299:		state->phase = 1;
        -:  300:		//state->supplyCount[supplyPos]--;
    #####:  301:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  302:
    #####:  303:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  304:		state->numBuys--;
        -:  305:		if (DEBUG)
        -:  306:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  307:	}
        -:  308:
        -:  309:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  310:	//state->discardCount[who]++;
        -:  311:
    #####:  312:	return 0;
        -:  313:}
        -:  314:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  315:int numHandCards(struct gameState *state) {
    #####:  316:	return state->handCount[whoseTurn(state)];
call    0 never executed
        -:  317:}
        -:  318:
function handCard called 0 returned 0% blocks executed 0%
    #####:  319:int handCard(int handPos, struct gameState *state) {
    #####:  320:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  321:	return state->hand[currentPlayer][handPos];
        -:  322:}
        -:  323:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  324:int supplyCount(int card, struct gameState *state) {
    #####:  325:	return state->supplyCount[card];
        -:  326:}
        -:  327:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  328:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  329:	int i;
    #####:  330:	int count = 0;
        -:  331:
    #####:  332:	for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  333:	{
    #####:  334:		if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  335:	}
        -:  336:
    #####:  337:	for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  338:	{
    #####:  339:		if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  340:	}
        -:  341:
    #####:  342:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  343:	{
    #####:  344:		if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  345:	}
        -:  346:
    #####:  347:	return count;
        -:  348:}
        -:  349:
function whoseTurn called 12032 returned 100% blocks executed 100%
    12032:  350:int whoseTurn(struct gameState *state) {
    12032:  351:	return state->whoseTurn;
        -:  352:}
        -:  353:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  354:int endTurn(struct gameState *state) {
        -:  355:	int k;
        -:  356:	int i;
    #####:  357:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  358:
        -:  359:	//Discard hand
    #####:  360:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  361:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  362:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  363:	}
    #####:  364:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:
        -:  366:	//Code for determining the player
    #####:  367:	if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  368:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  369:	}
        -:  370:	else {
    #####:  371:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:	}
        -:  373:
    #####:  374:	state->outpostPlayed = 0;
    #####:  375:	state->phase = 0;
    #####:  376:	state->numActions = 1;
    #####:  377:	state->coins = 0;
    #####:  378:	state->numBuys = 1;
    #####:  379:	state->playedCardCount = 0;
    #####:  380:	state->handCount[state->whoseTurn] = 0;
        -:  381:
        -:  382:	//int k; move to top
        -:  383:	//Next player draws hand
    #####:  384:	for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  385:		drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  386:	}
        -:  387:
        -:  388:	//Update money
    #####:  389:	updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  390:
    #####:  391:	return 0;
        -:  392:}
        -:  393:
function isGameOver called 8 returned 100% blocks executed 100%
        8:  394:int isGameOver(struct gameState *state) {
        -:  395:	int i;
        -:  396:	int j;
        -:  397:
        -:  398:	//if stack of Province cards is empty, the game ends
        8:  399:	if (state->supplyCount[province] == 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  400:	{
        2:  401:		return 1;
        -:  402:	}
        -:  403:
        -:  404:	//if three supply pile are at 0, the game ends
        6:  405:	j = 0;
      156:  406:	for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  407:	{
      150:  408:		if (state->supplyCount[i] == 0)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  409:		{
       10:  410:			j++;
        -:  411:		}
        -:  412:	}
        6:  413:	if (j >= 3)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  414:	{
        2:  415:		return 1;
        -:  416:	}
        -:  417:
        4:  418:	return 0;
        -:  419:}
        -:  420:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  421:int scoreFor(int player, struct gameState *state) {
        -:  422:
        -:  423:	int i;
    #####:  424:	int score = 0;
        -:  425:	//score from hand
    #####:  426:	for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  427:	{
    #####:  428:		if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:		if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  430:		if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  431:		if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  432:		if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  433:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  434:	}
        -:  435:
        -:  436:	//score from discard
    #####:  437:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  438:	{
    #####:  439:		if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:		if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  441:		if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  442:		if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  443:		if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  444:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  445:	}
        -:  446:
        -:  447:	//score from deck
    #####:  448:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  449:	{
    #####:  450:		if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:		if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  452:		if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  453:		if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  454:		if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  455:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  456:	}
        -:  457:
    #####:  458:	return score;
        -:  459:}
        -:  460:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  461:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  462:	int i;
        -:  463:	int j;
        -:  464:	int highScore;
        -:  465:	int currentPlayer;
        -:  466:
        -:  467:	//get score for each player
    #####:  468:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  469:	{
        -:  470:		//set unused player scores to -9999
    #####:  471:		if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  472:		{
    #####:  473:			players[i] = -9999;
        -:  474:		}
        -:  475:		else
        -:  476:		{
    #####:  477:			players[i] = scoreFor(i, state);
call    0 never executed
        -:  478:		}
        -:  479:	}
        -:  480:
        -:  481:	//find highest score
    #####:  482:	j = 0;
    #####:  483:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:		if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  486:		{
    #####:  487:			j = i;
        -:  488:		}
        -:  489:	}
    #####:  490:	highScore = players[j];
        -:  491:
        -:  492:	//add 1 to players who had less turns
    #####:  493:	currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  494:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  495:	{
    #####:  496:		if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  497:		{
    #####:  498:			players[i]++;
        -:  499:		}
        -:  500:	}
        -:  501:
        -:  502:	//find new highest score
    #####:  503:	j = 0;
    #####:  504:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:		if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  507:		{
    #####:  508:			j = i;
        -:  509:		}
        -:  510:	}
    #####:  511:	highScore = players[j];
        -:  512:
        -:  513:	//set winners in array to 1 and rest to 0
    #####:  514:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:		if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  517:		{
    #####:  518:			players[i] = 1;
        -:  519:		}
        -:  520:		else
        -:  521:		{
    #####:  522:			players[i] = 0;
        -:  523:		}
        -:  524:	}
        -:  525:
    #####:  526:	return 0;
        -:  527:}
        -:  528:
function drawCard called 65902 returned 100% blocks executed 92%
    65902:  529:int drawCard(int player, struct gameState *state)
        -:  530:{
        -:  531:	int count;
        -:  532:	int deckCounter;
    65902:  533:	if (state->deckCount[player] <= 0) {//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  534:
        -:  535:	  //Step 1 Shuffle the discard pile back into a deck
        -:  536:		int i;
        -:  537:		//Move discard to deck
     4395:  538:		for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
     3921:  539:			state->deck[player][i] = state->discard[player][i];
     3921:  540:			state->discard[player][i] = -1;
        -:  541:		}
        -:  542:
      474:  543:		state->deckCount[player] = state->discardCount[player];
      474:  544:		state->discardCount[player] = 0;//Reset discard
        -:  545:
        -:  546:		//Shufffle the deck
      474:  547:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  548:
        -:  549:		if (DEBUG) {//Debug statements
        -:  550:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  551:		}
        -:  552:
      474:  553:		state->discardCount[player] = 0;
        -:  554:
        -:  555:		//Step 2 Draw Card
      474:  556:		count = state->handCount[player];//Get current player's hand count
        -:  557:
        -:  558:		if (DEBUG) {//Debug statements
        -:  559:			printf("Current hand count: %d\n", count);
        -:  560:		}
        -:  561:
      474:  562:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  563:
      474:  564:		if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  565:			return -1;
        -:  566:
      474:  567:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      474:  568:		state->deckCount[player]--;
      474:  569:		state->handCount[player]++;//Increment hand count
        -:  570:	}
        -:  571:
        -:  572:	else {
    65428:  573:		int count = state->handCount[player];//Get current hand count for player
        -:  574:		int deckCounter;
        -:  575:		if (DEBUG) {//Debug statements
        -:  576:			printf("Current hand count: %d\n", count);
        -:  577:		}
        -:  578:
    65428:  579:		deckCounter = state->deckCount[player];//Create holder for the deck count
    65428:  580:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    65428:  581:		state->deckCount[player]--;
    65428:  582:		state->handCount[player]++;//Increment hand count
        -:  583:	}
        -:  584:
    65902:  585:	return 0;
        -:  586:}
        -:  587:
function getCost called 56 returned 100% blocks executed 100%
       56:  588:int getCost(int cardNumber)
        -:  589:{
       56:  590:	switch (cardNumber)
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  591:	{
        -:  592:	case curse:
        2:  593:		return 0;
        -:  594:	case estate:
        2:  595:		return 2;
        -:  596:	case duchy:
        2:  597:		return 5;
        -:  598:	case province:
        2:  599:		return 8;
        -:  600:	case copper:
        2:  601:		return 0;
        -:  602:	case silver:
        2:  603:		return 3;
        -:  604:	case gold:
        2:  605:		return 6;
        -:  606:	case adventurer:
        2:  607:		return 6;
        -:  608:	case council_room:
        2:  609:		return 5;
        -:  610:	case feast:
        2:  611:		return 4;
        -:  612:	case gardens:
        2:  613:		return 4;
        -:  614:	case mine:
        2:  615:		return 5;
        -:  616:	case remodel:
        2:  617:		return 4;
        -:  618:	case smithy:
        2:  619:		return 4;
        -:  620:	case village:
        2:  621:		return 3;
        -:  622:	case baron:
        2:  623:		return 4;
        -:  624:	case great_hall:
        2:  625:		return 3;
        -:  626:	case minion:
        2:  627:		return 5;
        -:  628:	case steward:
        2:  629:		return 3;
        -:  630:	case tribute:
        2:  631:		return 5;
        -:  632:	case ambassador:
        2:  633:		return 3;
        -:  634:	case cutpurse:
        2:  635:		return 4;
        -:  636:	case embargo:
        2:  637:		return 2;
        -:  638:	case outpost:
        2:  639:		return 5;
        -:  640:	case salvager:
        2:  641:		return 4;
        -:  642:	case sea_hag:
        2:  643:		return 4;
        -:  644:	case treasure_map:
        2:  645:		return 4;
        -:  646:	}
        -:  647:
        2:  648:	return -1;
        -:  649:}
        -:  650:
function playAdventurer called 2002 returned 100% blocks executed 100%
     2002:  651:int playAdventurer(struct gameState *state) {
     2002:  652:	int drawntreasure = 0;
        -:  653:	int cardDrawn;
        -:  654:	int temphand[MAX_HAND];
     2002:  655:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2002:  656:	int z = 0;// this is the counter for the temp hand
        -:  657:	
    31826:  658:	while (drawntreasure < 2) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
    27822:  659:		if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
      474:  660:			shuffle(currentPlayer, state);
call    0 returned 100%
        -:  661:		}
    27822:  662:		drawCard(currentPlayer, state);
call    0 returned 100%
    27822:  663:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    27822:  664:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 95% (fallthrough)
branch  3 taken 5%
branch  4 taken 5% (fallthrough)
branch  5 taken 95%
     4004:  665:			drawntreasure++;
        -:  666:		else {
    23818:  667:			temphand[z] = cardDrawn;
    23818:  668:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    23818:  669:			z++;
        -:  670:		}
        -:  671:	}
    27822:  672:	while (z - 1 >= 0) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
    23818:  673:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        -:  674:		// z = z + 1; <-- teammate's buggy code
    23818:  675:		z = z - 1; // fixed code to prevent seg fault
        -:  676:	}
     2002:  677:	return 0;
        -:  678:}
        -:  679:
function playCouncilRoom called 0 returned 0% blocks executed 0%
    #####:  680:int playCouncilRoom(struct gameState *state, int handPos) {
        -:  681:	int i;
    #####:  682:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  683:
        -:  684:	//+4 Cards
    #####:  685:	for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  686:	{
    #####:  687:		drawCard(currentPlayer, state);
call    0 never executed
        -:  688:	}
        -:  689:
        -:  690:	//+1 Buy
    #####:  691:	state->numBuys++;
        -:  692:
        -:  693:	//Each other player draws a card
    #####:  694:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  695:	{
    #####:  696:		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  697:		{
    #####:  698:			drawCard(i, state);
call    0 never executed
        -:  699:		}
        -:  700:	}
        -:  701:
        -:  702:	//put played card in played card pile
    #####:  703:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  704:
    #####:  705:	return 0;
        -:  706:}
        -:  707:
function playRemodel called 0 returned 0% blocks executed 0%
    #####:  708:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos) {
        -:  709:	int i;
        -:  710:	int j;
    #####:  711:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  712:
    #####:  713:	j = state->hand[currentPlayer][choice2];  //store card we will trash
        -:  714:
    #####:  715:	if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  716:	{
    #####:  717:		return -1;
        -:  718:	}
        -:  719:
    #####:  720:	gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  721:
        -:  722:	//discard card from hand
    #####:  723:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  724:
        -:  725:	//discard trashed card
    #####:  726:	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  727:	{
    #####:  728:		if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  729:		{
    #####:  730:			discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  731:			break;
        -:  732:		}
        -:  733:	}
        -:  734:
    #####:  735:	return 0;
        -:  736:}
        -:  737:
function playSmithy called 2002 returned 100% blocks executed 100%
     2002:  738:int playSmithy(struct gameState *state, int handPos) {
        -:  739:	int i;
     2002:  740:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  741:
        -:  742:	//+3 Cards
        -:  743:	//for (i = 0; i < 5; i++)						// TEAMMATE BUG: 3 was changed to 5.
        -:  744:	//{
        -:  745:	//	drawCard(currentPlayer, state);
        -:  746:	//}
        -:  747:
     8008:  748:	for (i = 0; i < 3; i++)						
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  749:	{
     6006:  750:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  751:	}
        -:  752:
        -:  753:	//discard card from hand
     2002:  754:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     2002:  755:	return 0;
        -:  756:}
        -:  757:
function playVillage called 2002 returned 100% blocks executed 100%
     2002:  758:int playVillage(struct gameState *state, int handPos) {
     2002:  759:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  760:
        -:  761:	//+1 Card
     2002:  762:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  763:
        -:  764:	//+2 Actions
        -:  765:	//state->numActions = state->numActions + 3;		// TEAMMATE BUG: +3 actions instead of +2
     2002:  766:	state->numActions = state->numActions + 2;	
        -:  767:
        -:  768:	//discard played card from hand
     2002:  769:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     2002:  770:	return 0;
        -:  771:}
        -:  772:
function cardEffect called 6008 returned 100% blocks executed 5%
     6008:  773:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  774:{
        -:  775:	int i;
        -:  776:	int j;
        -:  777:	int k;
        -:  778:	int x;
        -:  779:	int index;
     6008:  780:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
     6008:  781:	int nextPlayer = currentPlayer + 1;
        -:  782:
     6008:  783:	int tributeRevealedCards[2] = { -1, -1 };
        -:  784:	int temphand[MAX_HAND];// moved above the if statement
        -:  785:	
     6008:  786:	if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
     1414:  787:		nextPlayer = 0;
        -:  788:	}
        -:  789:
        -:  790:
        -:  791:	//uses switch to select card and perform actions
     6008:  792:	switch (card)
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 1%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  793:	{
        -:  794:	case adventurer:
     2002:  795:		return playAdventurer(state);		// TEAMMATE BUG FIXED: added "return" in front of playAdventurer
call    0 returned 100%
        -:  796:		break;
        -:  797:
        -:  798:	case council_room:
    #####:  799:		playCouncilRoom(state, handPos);
call    0 never executed
    #####:  800:		break;
        -:  801:
        -:  802:	case feast:
        -:  803:		//gain card with cost up to 5
        -:  804:		//Backup hand
    #####:  805:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  806:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  807:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  808:		}
        -:  809:		//Backup hand
        -:  810:
        -:  811:		//Update Coins for Buy
    #####:  812:		updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  813:		x = 1;//Condition to loop on
    #####:  814:		while (x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  815:			if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  816:				if (DEBUG)
        -:  817:					printf("None of that card left, sorry!\n");
        -:  818:
        -:  819:				if (DEBUG) {
        -:  820:					printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  821:				}
        -:  822:			}
    #####:  823:			else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  824:				printf("That card is too expensive!\n");
call    0 never executed
        -:  825:
        -:  826:				if (DEBUG) {
        -:  827:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  828:				}
        -:  829:			}
        -:  830:			else {
        -:  831:
        -:  832:				if (DEBUG) {
        -:  833:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  834:				}
        -:  835:
    #####:  836:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  837:				x = 0;//No more buying cards
        -:  838:
        -:  839:				if (DEBUG) {
        -:  840:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  841:				}
        -:  842:
        -:  843:			}
        -:  844:		}
        -:  845:
        -:  846:		//Reset Hand
    #####:  847:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  848:			state->hand[currentPlayer][i] = temphand[i];
    #####:  849:			temphand[i] = -1;
        -:  850:		}
        -:  851:		//Reset Hand
        -:  852:
    #####:  853:		return 0;
        -:  854:
        -:  855:	case gardens:
    #####:  856:		return -1;
        -:  857:
        -:  858:	case mine:
    #####:  859:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  860:
    #####:  861:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  862:		{
    #####:  863:			return -1;
        -:  864:		}
        -:  865:
    #####:  866:		if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  867:		{
    #####:  868:			return -1;
        -:  869:		}
        -:  870:
    #####:  871:		if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  872:		{
    #####:  873:			return -1;
        -:  874:		}
        -:  875:
    #####:  876:		gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  877:
        -:  878:		//discard card from hand
    #####:  879:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  880:
        -:  881:		//discard trashed card
    #####:  882:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  883:		{
    #####:  884:			if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  885:			{
    #####:  886:				discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  887:				break;
        -:  888:			}
        -:  889:		}
        -:  890:
    #####:  891:		return 0;
        -:  892:
        -:  893:	case remodel:
    #####:  894:		playRemodel(state, choice1, choice2, handPos);
call    0 never executed
    #####:  895:		break;
        -:  896:
        -:  897:	case smithy:
     2002:  898:		return playSmithy(state, handPos);
call    0 returned 100%
        -:  899:		break;
        -:  900:		
        -:  901:	case village:
     2002:  902:		return playVillage(state, handPos);
call    0 returned 100%
        -:  903:		break;
        -:  904:		
        -:  905:	case baron:
    #####:  906:		state->numBuys++;//Increase buys by 1!
    #####:  907:		if (choice1 > 0) {//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  908:			int p = 0;//Iterator for hand!
    #####:  909:			int card_not_discarded = 1;//Flag for discard set!
    #####:  910:			while (card_not_discarded) {
branch  0 never executed
branch  1 never executed
    #####:  911:				if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  912:					state->coins += 4;//Add 4 coins to the amount of coins
    #####:  913:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  914:					state->discardCount[currentPlayer]++;
    #####:  915:					for (; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  916:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  917:					}
    #####:  918:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  919:					state->handCount[currentPlayer]--;
    #####:  920:					card_not_discarded = 0;//Exit the loop
        -:  921:				}
    #####:  922:				else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  923:					if (DEBUG) {
        -:  924:						printf("No estate cards in your hand, invalid choice\n");
        -:  925:						printf("Must gain an estate if there are any\n");
        -:  926:					}
    #####:  927:					if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  928:						gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  929:						state->supplyCount[estate]--;//Decrement estates
    #####:  930:						if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  931:							isGameOver(state);
call    0 never executed
        -:  932:						}
        -:  933:					}
    #####:  934:					card_not_discarded = 0;//Exit the loop
        -:  935:				}
        -:  936:
        -:  937:				else {
    #####:  938:					p++;//Next card
        -:  939:				}
        -:  940:			}
        -:  941:		}
        -:  942:
        -:  943:		else {
    #####:  944:			if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  945:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  946:				state->supplyCount[estate]--;//Decrement Estates
    #####:  947:				if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  948:					isGameOver(state);
call    0 never executed
        -:  949:				}
        -:  950:			}
        -:  951:		}
        -:  952:
        -:  953:
    #####:  954:		return 0;
        -:  955:
        -:  956:	case great_hall:
        -:  957:		//+1 Card
        2:  958:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  959:
        -:  960:		//+1 Actions
        2:  961:		state->numActions++;
        -:  962:
        -:  963:		//discard card from hand
        2:  964:		discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  965:		return 0;
        -:  966:
        -:  967:	case minion:
        -:  968:		//+1 action
    #####:  969:		state->numActions++;
        -:  970:
        -:  971:		//discard card from hand
    #####:  972:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  973:
    #####:  974:		if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  975:		{
    #####:  976:			state->coins = state->coins + 2;
        -:  977:		}
        -:  978:
    #####:  979:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  980:		{
        -:  981:			//discard hand
    #####:  982:			while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  983:			{
    #####:  984:				discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  985:			}
        -:  986:
        -:  987:			//draw 4
    #####:  988:			for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  989:			{
    #####:  990:				drawCard(currentPlayer, state);
call    0 never executed
        -:  991:			}
        -:  992:
        -:  993:			//other players discard hand and redraw if hand size > 4
    #####:  994:			for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  995:			{
    #####:  996:				if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  997:				{
    #####:  998:					if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -:  999:					{
        -: 1000:						//discard hand
    #####: 1001:						while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -: 1002:						{
    #####: 1003:							discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1004:						}
        -: 1005:
        -: 1006:						//draw 4
    #####: 1007:						for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1008:						{
    #####: 1009:							drawCard(i, state);
call    0 never executed
        -: 1010:						}
        -: 1011:					}
        -: 1012:				}
        -: 1013:			}
        -: 1014:
        -: 1015:		}
    #####: 1016:		return 0;
        -: 1017:
        -: 1018:	case steward:
    #####: 1019:		if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1020:		{
        -: 1021:			//+2 cards
    #####: 1022:			drawCard(currentPlayer, state);
call    0 never executed
    #####: 1023:			drawCard(currentPlayer, state);
call    0 never executed
        -: 1024:		}
    #####: 1025:		else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1026:		{
        -: 1027:			//+2 coins
    #####: 1028:			state->coins = state->coins + 2;
        -: 1029:		}
        -: 1030:		else
        -: 1031:		{
        -: 1032:			//trash 2 cards in hand
    #####: 1033:			discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1034:			discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1035:		}
        -: 1036:
        -: 1037:		//discard card from hand
    #####: 1038:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1039:		return 0;
        -: 1040:
        -: 1041:	case tribute:
    #####: 1042:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####: 1043:			if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1044:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1045:				state->deckCount[nextPlayer]--;
        -: 1046:			}
    #####: 1047:			else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1048:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1049:				state->discardCount[nextPlayer]--;
        -: 1050:			}
        -: 1051:			else {
        -: 1052:				//No Card to Reveal
        -: 1053:				if (DEBUG) {
        -: 1054:					printf("No cards to reveal\n");
        -: 1055:				}
        -: 1056:			}
        -: 1057:		}
        -: 1058:
        -: 1059:		else {
    #####: 1060:			if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####: 1061:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1062:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1063:					state->deckCount[nextPlayer]++;
    #####: 1064:					state->discard[nextPlayer][i] = -1;
    #####: 1065:					state->discardCount[nextPlayer]--;
        -: 1066:				}
        -: 1067:
    #####: 1068:				shuffle(nextPlayer, state);//Shuffle the deck
call    0 never executed
        -: 1069:			}
    #####: 1070:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1071:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1072:			state->deckCount[nextPlayer]--;
    #####: 1073:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1074:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1075:			state->deckCount[nextPlayer]--;
        -: 1076:		}
        -: 1077:
    #####: 1078:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1079:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1080:			state->playedCardCount++;
    #####: 1081:			tributeRevealedCards[1] = -1;
        -: 1082:		}
        -: 1083:
    #####: 1084:		for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1085:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1086:				state->coins += 2;
        -: 1087:			}
        -: 1088:
    #####: 1089:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1090:				drawCard(currentPlayer, state);
call    0 never executed
    #####: 1091:				drawCard(currentPlayer, state);
call    0 never executed
        -: 1092:			}
        -: 1093:			else {//Action Card
    #####: 1094:				state->numActions = state->numActions + 2;
        -: 1095:			}
        -: 1096:		}
        -: 1097:
    #####: 1098:		return 0;
        -: 1099:
        -: 1100:	case ambassador:
    #####: 1101:		j = 0;		//used to check if player has enough cards to discard
        -: 1102:
    #####: 1103:		if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1104:		{
    #####: 1105:			return -1;
        -: 1106:		}
        -: 1107:
    #####: 1108:		if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1109:		{
    #####: 1110:			return -1;
        -: 1111:		}
        -: 1112:
    #####: 1113:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1114:		{
    #####: 1115:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1116:			{
    #####: 1117:				j++;
        -: 1118:			}
        -: 1119:		}
    #####: 1120:		if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1121:		{
    #####: 1122:			return -1;
        -: 1123:		}
        -: 1124:
        -: 1125:		if (DEBUG)
        -: 1126:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1127:
        -: 1128:		//increase supply count for choosen card by amount being discarded
    #####: 1129:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1130:
        -: 1131:		//each other player gains a copy of revealed card
    #####: 1132:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1133:		{
    #####: 1134:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1135:			{
    #####: 1136:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1137:			}
        -: 1138:		}
        -: 1139:
        -: 1140:		//discard played card from hand
    #####: 1141:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1142:
        -: 1143:		//trash copies of cards returned to supply
    #####: 1144:		for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1145:		{
    #####: 1146:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1147:			{
    #####: 1148:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1149:				{
    #####: 1150:					discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1151:					break;
        -: 1152:				}
        -: 1153:			}
        -: 1154:		}
        -: 1155:
    #####: 1156:		return 0;
        -: 1157:
        -: 1158:	case cutpurse:
        -: 1159:
    #####: 1160:		updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1161:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1162:		{
    #####: 1163:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1164:			{
    #####: 1165:				for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1166:				{
    #####: 1167:					if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1168:					{
    #####: 1169:						discardCard(j, i, state, 0);
call    0 never executed
    #####: 1170:						break;
        -: 1171:					}
    #####: 1172:					if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1173:					{
    #####: 1174:						for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1175:						{
        -: 1176:							if (DEBUG)
        -: 1177:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1178:						}
    #####: 1179:						break;
        -: 1180:					}
        -: 1181:				}
        -: 1182:
        -: 1183:			}
        -: 1184:
        -: 1185:		}
        -: 1186:
        -: 1187:		//discard played card from hand
    #####: 1188:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1189:
    #####: 1190:		return 0;
        -: 1191:
        -: 1192:
        -: 1193:	case embargo:
        -: 1194:		//+2 Coins
    #####: 1195:		state->coins = state->coins + 2;
        -: 1196:
        -: 1197:		//see if selected pile is in play
    #####: 1198:		if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1199:		{
    #####: 1200:			return -1;
        -: 1201:		}
        -: 1202:
        -: 1203:		//add embargo token to selected supply pile
    #####: 1204:		state->embargoTokens[choice1]++;
        -: 1205:
        -: 1206:		//trash card
    #####: 1207:		discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1208:		return 0;
        -: 1209:
        -: 1210:	case outpost:
        -: 1211:		//set outpost flag
    #####: 1212:		state->outpostPlayed++;
        -: 1213:
        -: 1214:		//discard card
    #####: 1215:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1216:		return 0;
        -: 1217:
        -: 1218:	case salvager:
        -: 1219:		//+1 buy
    #####: 1220:		state->numBuys++;
        -: 1221:
    #####: 1222:		if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1223:		{
        -: 1224:			//gain coins equal to trashed card
    #####: 1225:			state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1226:			//trash card
    #####: 1227:			discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1228:		}
        -: 1229:
        -: 1230:		//discard card
    #####: 1231:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1232:		return 0;
        -: 1233:
        -: 1234:	case sea_hag:
    #####: 1235:		for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1236:			if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1237:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1238:				state->discardCount[i]++;
    #####: 1239:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1240:			}
        -: 1241:		}
    #####: 1242:		return 0;
        -: 1243:
        -: 1244:	case treasure_map:
        -: 1245:		//search hand for another treasure_map
    #####: 1246:		index = -1;
    #####: 1247:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1248:		{
    #####: 1249:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1250:			{
    #####: 1251:				index = i;
    #####: 1252:				break;
        -: 1253:			}
        -: 1254:		}
    #####: 1255:		if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1256:		{
        -: 1257:			//trash both treasure cards
    #####: 1258:			discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1259:			discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1260:
        -: 1261:			//gain 4 Gold cards
    #####: 1262:			for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1263:			{
    #####: 1264:				gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1265:			}
        -: 1266:
        -: 1267:			//return success
    #####: 1268:			return 1;
        -: 1269:		}
        -: 1270:
        -: 1271:		//no second treasure_map found in hand
    #####: 1272:		return -1;
        -: 1273:	}
        -: 1274:
    #####: 1275:	return -1;
        -: 1276:}
        -: 1277:
function discardCard called 4006 returned 100% blocks executed 78%
     4006: 1278:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1279:{
        -: 1280:
        -: 1281:	//if card is not trashed, added to Played pile 
     4006: 1282:	if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1283:	{
        -: 1284:		//add card to played pile
     4006: 1285:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     4006: 1286:		state->playedCardCount++;
        -: 1287:	}
        -: 1288:
        -: 1289:	//set played card to -1
     4006: 1290:	state->hand[currentPlayer][handPos] = -1;
        -: 1291:
        -: 1292:	//remove card from player's hand
     4006: 1293:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1294:	{
        -: 1295:		//reduce number of cards in hand
    #####: 1296:		state->handCount[currentPlayer]--;
        -: 1297:	}
     4006: 1298:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1299:	{
        -: 1300:		//reduce number of cards in hand
    #####: 1301:		state->handCount[currentPlayer]--;
        -: 1302:	}
        -: 1303:	else
        -: 1304:	{
        -: 1305:		//replace discarded card with last card in hand
     4006: 1306:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1307:		//set last card to -1
     4006: 1308:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1309:		//reduce number of cards in hand
     4006: 1310:		state->handCount[currentPlayer]--;
        -: 1311:	}
        -: 1312:
     4006: 1313:	return 0;
        -: 1314:}
        -: 1315:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1316:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1317:{
        -: 1318:	//Note: supplyPos is enum of choosen card
        -: 1319:
        -: 1320:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1321:	if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1322:	{
    #####: 1323:		return -1;
        -: 1324:	}
        -: 1325:
        -: 1326:	//added card for [whoseTurn] current player:
        -: 1327:	// toFlag = 0 : add to discard
        -: 1328:	// toFlag = 1 : add to deck
        -: 1329:	// toFlag = 2 : add to hand
        -: 1330:
    #####: 1331:	if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1332:	{
    #####: 1333:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1334:		state->deckCount[player]++;
        -: 1335:	}
    #####: 1336:	else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1337:	{
    #####: 1338:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1339:		state->handCount[player]++;
        -: 1340:	}
        -: 1341:	else
        -: 1342:	{
    #####: 1343:		state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1344:		state->discardCount[player]++;
        -: 1345:	}
        -: 1346:
        -: 1347:	//decrease number in supply pile
    #####: 1348:	state->supplyCount[supplyPos]--;
        -: 1349:
    #####: 1350:	return 0;
        -: 1351:}
        -: 1352:
function updateCoins called 6020 returned 100% blocks executed 100%
     6020: 1353:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1354:{
        -: 1355:	int i;
        -: 1356:
        -: 1357:	//reset coin count
     6020: 1358:	state->coins = 0;
        -: 1359:
        -: 1360:	//add coins for each Treasure card in player's hand
    36150: 1361:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1362:	{
    30130: 1363:		if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1364:		{
    24062: 1365:			state->coins += 1;
        -: 1366:		}
     6068: 1367:		else if (state->hand[player][i] == silver)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1368:		{
        6: 1369:			state->coins += 2;
        -: 1370:		}
     6062: 1371:		else if (state->hand[player][i] == gold)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1372:		{
        6: 1373:			state->coins += 3;
        -: 1374:		}
        -: 1375:	}
        -: 1376:
        -: 1377:	//add bonus
     6020: 1378:	state->coins += bonus;
        -: 1379:
     6020: 1380:	return 0;
        -: 1381:}
